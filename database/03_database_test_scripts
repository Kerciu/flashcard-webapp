# -----------------------------------------------------------------
-- TRIGGERS

-- after_insert_customer_statistics
INSERT INTO Customers (email, password_hash, username, profile_creation_date, root_folder_id) 
VALUES ('test_user@example.com', 'hashedpassword', 'test_user', NOW(), 1);
-- verify the trigger
SELECT * FROM User_Statistics WHERE user_id = LAST_INSERT_ID();

-- before_insert_notification
INSERT INTO Notifications (user_id, received, text, received_date) 
VALUES (1, 0, 'Test Notification', NOW());
-- verify the trigger
SELECT creation_date FROM Notifications WHERE id = LAST_INSERT_ID();

--after_insert_customer_folder
INSERT INTO Customers (email, password_hash, username, profile_creation_date, root_folder_id) 
VALUES ('another_user@example.com', 'anotherhashedpassword', 'another_user', NOW(), 1);
-- verify the trigger
SELECT * FROM Folders WHERE name = CONCAT('Root Folder - ', 'another_user');
SELECT root_folder_id FROM Customers WHERE id = LAST_INSERT_ID();

----after_insert_friendship_notification
INSERT INTO Friendships (sender_id, receiver_id, accepted) 
VALUES (1, 2, 0);
-- verify the trigger
SELECT * FROM Notifications WHERE user_id = 2 AND text LIKE '%friend request from user ID: 1%';

# -----------------------------------------------------------------
-- FUNCTIONS
-- count_decks_new_cards_func
-- 1. count new flashcards in a deck for a user who has not reviewed any card yet
DECLARE
    result NUMBER;
BEGIN
    -- Assuming deckId = 1 and userId = 1
    result := count_decks_new_cards_func(1, 1);
    DBMS_OUTPUT.PUT_LINE('New Cards Count: ' || result); -- Expected: number of flashcards in deck 1 that the user hasn't reviewed
END;
-- 2. count new flashcards in a deck for a user who has reviewed all cards
DECLARE
    result NUMBER;
BEGIN
    -- Assuming deckId = 1 and userId = 2
    result := count_decks_new_cards_func(2, 1);
    DBMS_OUTPUT.PUT_LINE('New Cards Count: ' || result); -- Expected: 0, as the user has reviewed all cards in deck 1
END;


-- get_deck_progress_func
-- 1. user with 50% progress in a deck
DECLARE
    result FLOAT;
BEGIN
    -- userId = 1, deckId = 1
    result := get_deck_progress__func(1, 1);
    DBMS_OUTPUT.PUT_LINE('Deck Progress: ' || result); -- Expected: 50%
END;
-- 2. user has not learned any flashcards in a deck
DECLARE
    result FLOAT;
BEGIN
    -- userId = 2, deckId = 1
    result := get_deck_progress_func(2, 1);
    DBMS_OUTPUT.PUT_LINE('Deck Progress: ' || result); -- Expected: 0
-- 3. deck with no flashcards
DECLARE
    result FLOAT;
BEGIN
    -- userId = 1, deckId = 999 (no cards in deck 999)
    result := get_deck_progress_func(1, 999);
    DBMS_OUTPUT.PUT_LINE('Deck Progress: ' || result); -- Expected: 0
END;

--calculate_study_time
-- 1. calculate study time for a user with review logs in the last 7 days
DECLARE
    result FLOAT;
BEGIN
    -- userId = 1
    result := calculate_study_time(1);
    DBMS_OUTPUT.PUT_LINE('Study Time (hours): ' || result); -- Expected: Total study time in hours (assuming 10 minutes per review log)
END;
-- 2. calculate study time for a user with no review logs in the last 7 days
DECLARE
    result FLOAT;
BEGIN
    -- userId = 2 (user with no recent review logs)
    result := calculate_study_time(2);
    DBMS_OUTPUT.PUT_LINE('Study Time (hours): ' || result); -- Expected: 0, as there are no review logs in the last 7 days
END;

-- calculate_longest_learning_streak
-- 1: user with a streak of consecutive days
DECLARE
    result INT;
BEGIN
    -- userId = 1 with consecutive review days
    result := calculate_longest_learning_streak(1);
    DBMS_OUTPUT.PUT_LINE('Longest Learning Streak (days): ' || result); -- Expected: longest streak of consecutive days
END;

-- 2. user with no review logs (no learning streak)
DECLARE
    result INT;
BEGIN
    -- userId = 2 with no review logs
    result := calculate_longest_learning_streak(2);
    DBMS_OUTPUT.PUT_LINE('Longest Learning Streak (days): ' || result); -- Expected: 0, as the user has no review logs
END;
